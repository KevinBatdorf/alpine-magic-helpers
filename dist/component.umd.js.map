{"version":3,"file":"component.umd.js","sources":["../src/utils.js","../src/component.js"],"sourcesContent":["export const checkForAlpine = () => {\n    if (! window.Alpine) {\n        throw new Error('[Magic Helpers] Alpine is required for the magic helpers to function correctly.')\n    }\n}\n\nexport const saferEval = (expression, dataContext, additionalHelperVariables = {}) => {\n    if (typeof expression === 'function') {\n        return expression.call(dataContext)\n    }\n\n    return (new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`))(\n        dataContext, ...Object.values(additionalHelperVariables)\n    )\n}\n","import { checkForAlpine, saferEval } from './utils'\n\n// TODO: These can be refactored some to combine functionality\nconst AlpineComponentMagicMethod = {\n    start() {\n        checkForAlpine()\n\n        Alpine.addMagicProperty('parent', function ($el) {\n            if (typeof $el.$parent !== 'undefined') return $el.$parent\n\n            const parentComponent = $el.parentNode.closest('[x-data]')\n\n            if (!parentComponent) throw new Error('Parent component not found')\n\n            let data\n\n            if (parentComponent.__x) {\n                data = parentComponent.__x.getUnobservedData()\n            } else {\n                // Component isn't ready yet so lets try to get its initial state\n                data = saferEval(parentComponent.getAttribute('x-data'), parentComponent)\n            }\n\n            $el.$parent = allowTwoWayCommunication(data, parentComponent)\n\n            const parentObserver = new MutationObserver(mutations => {\n                for (let i = 0; i < mutations.length; i++) {\n                    const closestParentComponent = mutations[i].target.closest('[x-data]')\n\n                    if (closestParentComponent && !closestParentComponent.isSameNode(parentComponent)) continue\n\n                    if (!closestParentComponent.__x) {\n                        throw 'Error locating $parent data'\n                    }\n\n                    $el.$parent = allowTwoWayCommunication(closestParentComponent.__x.getUnobservedData(), parentComponent)\n                    $el.__x.updateElements($el)\n                }\n            })\n\n            parentObserver.observe(parentComponent, {\n                attributes: true,\n                childList: true,\n                characterData: true,\n                subtree: true,\n            })\n\n            return data\n        })\n\n        Alpine.addMagicProperty('component', function () {\n            return function (componentName) {\n                if (typeof this[componentName] !== 'undefined') return this[componentName]\n\n                const componentBeingObserved = document.querySelector(`[x-data][x-id=\"${componentName}\"], [x-data]#${componentName}`)\n\n                if (!componentBeingObserved) {\n                    throw 'Component not found'\n                }\n\n                // Set initial state\n                let data\n\n                if (componentBeingObserved.__x) {\n                    data = componentBeingObserved.__x.getUnobservedData()\n                } else {\n                    // Component isn't ready yet so lets try to get its initial state\n                    data = saferEval(componentBeingObserved.getAttribute('x-data'), componentBeingObserved)\n                }\n\n                this[componentName] = allowTwoWayCommunication(data, componentBeingObserved)\n\n                const observer = new MutationObserver(mutations => {\n                    for (let i = 0; i < mutations.length; i++) {\n                        const closestParentComponent = mutations[i].target.closest('[x-data]')\n\n                        if ((closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue\n\n                        if (!closestParentComponent.__x) {\n                            throw 'Error locating $component data'\n                        }\n\n                        this[componentName] = allowTwoWayCommunication(closestParentComponent.__x.getUnobservedData(), componentBeingObserved)\n                    }\n                })\n\n                observer.observe(componentBeingObserved, {\n                    attributes: true,\n                    childList: true,\n                    characterData: true,\n                    subtree: true,\n                })\n\n                return this[componentName]\n            }\n        })\n    }\n}\n\nconst allowTwoWayCommunication = (data, observedComponent) => {\n    return new Proxy(data, {\n        set(target, prop, value) {\n            if (!observedComponent.__x) {\n                throw new Error('Failed to communicate with observed component')\n            }\n\n            observedComponent.__x.$data[prop] = value\n\n            return true\n        }\n    })\n}\n\nconst alpine = window.deferLoadingAlpine || ((alpine) => alpine())\n\nwindow.deferLoadingAlpine = function (callback) {\n    alpine(callback)\n\n    AlpineComponentMagicMethod.start()\n}\n\nexport default AlpineComponentMagicMethod\n"],"names":["saferEval","expression","dataContext","additionalHelperVariables","call","Function","Object","keys","values","AlpineComponentMagicMethod","start","window","Alpine","Error","checkForAlpine","addMagicProperty","$el","$parent","data","parentComponent","parentNode","closest","__x","getUnobservedData","getAttribute","allowTwoWayCommunication","MutationObserver","mutations","i","length","closestParentComponent","target","isSameNode","updateElements","observe","attributes","childList","characterData","subtree","componentName","componentBeingObserved","document","querySelector","this","_this","observedComponent","Proxy","set","prop","value","$data","alpine","deferLoadingAlpine","callback"],"mappings":"yLAMaA,EAAY,SAACC,EAAYC,EAAaC,GAC/C,gBAD+CA,IAAAA,EAA4B,IACjD,mBAAfF,EACAA,EAAWG,KAAKF,OAGfG,UAAU,gBAAYC,OAAOC,KAAKJ,4DAAqFF,8CAC/HC,UAAgBI,OAAOE,OAAOL,MCThCM,EAA6B,CAC/BC,kBDJ0B,WAC1B,IAAMC,OAAOC,OACT,UAAUC,MAAM,mFCGhBC,GAEAF,OAAOG,iBAAiB,SAAU,SAAUC,GACxC,QAA2B,IAAhBA,EAAIC,QAAyB,OAAOD,EAAIC,QAEnD,IAIIC,EAJEC,EAAkBH,EAAII,WAAWC,QAAQ,YAE/C,IAAKF,EAAiB,UAAUN,MAAM,8BAmCtC,OA9BIK,EADAC,EAAgBG,IACTH,EAAgBG,IAAIC,oBAGpBvB,EAAUmB,EAAgBK,aAAa,UAAWL,GAG7DH,EAAIC,QAAUQ,EAAyBP,EAAMC,GAEtB,IAAIO,iBAAiB,SAAAC,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAAK,CACvC,IAAME,EAAyBH,EAAUC,GAAGG,OAAOV,QAAQ,YAE3D,IAAIS,GAA2BA,EAAuBE,WAAWb,GAAjE,CAEA,IAAKW,EAAuBR,IACxB,KAAM,8BAGVN,EAAIC,QAAUQ,EAAyBK,EAAuBR,IAAIC,oBAAqBJ,GACvFH,EAAIM,IAAIW,eAAejB,OAIhBkB,QAAQf,EAAiB,CACpCgB,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,SAAS,IAGNpB,IAGXN,OAAOG,iBAAiB,YAAa,WACjC,gBAAiBwB,cACb,QAAmC,SAAnBA,GAAgC,YAAYA,GAE5D,IAOIrB,EAPEsB,EAAyBC,SAASC,gCAAgCH,kBAA6BA,GAErG,IAAKC,EACD,KAAM,sBAoCV,OA7BItB,EADAsB,EAAuBlB,IAChBkB,EAAuBlB,IAAIC,oBAG3BvB,EAAUwC,EAAuBhB,aAAa,UAAWgB,GAGpEG,KAAKJ,GAAiBd,EAAyBP,EAAMsB,GAEpC,IAAId,iBAAiB,SAAAC,GAClC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAAK,CACvC,IAAME,EAAyBH,EAAUC,GAAGG,OAAOV,QAAQ,YAE3D,IAAKS,IAA0BA,EAAuBE,WAAWY,EAAK5B,KAAtE,CAEA,IAAKc,EAAuBR,IACxB,KAAM,iCAGVsB,EAAKL,GAAiBd,EAAyBK,EAAuBR,IAAIC,oBAAqBiB,OAI9FN,QAAQM,EAAwB,CACrCL,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,SAAS,SAGDC,QAMtBd,EAA2B,SAACP,EAAM2B,GACpC,WAAWC,MAAM5B,EAAM,CACnB6B,aAAIhB,EAAQiB,EAAMC,GACd,IAAKJ,EAAkBvB,IACnB,UAAUT,MAAM,iDAKpB,OAFAgC,EAAkBvB,IAAI4B,MAAMF,GAAQC,SAO1CE,EAASxC,OAAOyC,oBAAuB,SAACD,UAAWA,YAEzDxC,OAAOyC,mBAAqB,SAAUC,GAClCF,EAAOE,GAEP5C,EAA2BC"}