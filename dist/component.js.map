{"version":3,"file":"component.js","sources":["../src/utils.js","../src/component.js"],"sourcesContent":["export const checkForAlpine = () => {\n    if (! window.Alpine) {\n        throw new Error('[Magic Helpers] Alpine is required for the magic helpers to function correctly.')\n    }\n}\n\nexport const saferEval = (expression, dataContext, additionalHelperVariables = {}) => {\n    if (typeof expression === 'function') {\n        return expression.call(dataContext)\n    }\n\n    return (new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`))(\n        dataContext, ...Object.values(additionalHelperVariables)\n    )\n}\n","\nimport { checkForAlpine, saferEval } from './utils'\n\n// TODO: These can be refactored some to combine functionality\nconst AlpineComponentMagicMethod = {\n    start() {\n        checkForAlpine()\n\n        Alpine.addMagicProperty('parent', function ($el) {\n            if (typeof $el.$parent !== 'undefined') return $el.$parent\n\n            const parentComponent = $el.parentNode.closest('[x-data]')\n            if (!parentComponent) throw 'Parent component not found'\n\n            // Add this to trigger mutations on update\n            parentComponent.setAttribute('x-bind:data-last-refresh', 'Date.now()')\n\n            let data\n            if (parentComponent.__x) {\n                data = parentComponent.__x.getUnobservedData()\n            } else {\n                // Component isn't ready yet so lets try to get its initial state\n                data = saferEval(parentComponent.getAttribute('x-data'), parentComponent)\n            }\n\n            $el.$parent = allowTwoWayCommunication(data, parentComponent)\n\n            const parentObserver = new MutationObserver(mutations => {\n                for (let i = 0; i < mutations.length; i++) {\n                    const mutatedComponent = mutations[i].target.closest('[x-data]')\n                    if ((mutatedComponent && !mutatedComponent.isSameNode(parentComponent))) continue\n                    $el.$parent = allowTwoWayCommunication(parentComponent.__x.getUnobservedData(), parentComponent)\n                    $el.__x.updateElements($el)\n                    return\n                }\n            })\n\n            parentObserver.observe(parentComponent, {\n                attributes: true,\n                childList: true,\n                characterData: true,\n                subtree: true,\n            })\n\n            return data\n        })\n\n        Alpine.addMagicProperty('component', function ($el) {\n            return function (componentName) {\n\n                if (typeof this[componentName] !== 'undefined') return this[componentName]\n\n                const componentBeingObserved = document.querySelector(`[x-data][x-id=\"${componentName}\"], [x-data]#${componentName}`)\n                if (!componentBeingObserved) throw 'Component not found'\n\n                // Add this to trigger mutations on update\n                componentBeingObserved.setAttribute('x-bind:data-last-refresh', 'Date.now()')\n\n                // Set initial state\n                let data\n                if (componentBeingObserved.__x) {\n                    data = componentBeingObserved.__x.getUnobservedData()\n                } else {\n                    // Component isn't ready yet so lets try to get its initial state\n                    data = saferEval(componentBeingObserved.getAttribute('x-data'), componentBeingObserved)\n                }\n\n                this[componentName] = allowTwoWayCommunication(data, componentBeingObserved)\n\n                const observer = new MutationObserver(mutations => {\n                    for (let i = 0; i < mutations.length; i++) {\n                        const closestParentComponent = mutations[i].target.closest('[x-data]')\n                        if ((closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue\n                        this[componentName] = allowTwoWayCommunication(componentBeingObserved.__x.getUnobservedData(), componentBeingObserved)\n                        return\n                    }\n                })\n                observer.observe(componentBeingObserved, {\n                    attributes: true,\n                    childList: true,\n                    characterData: true,\n                    subtree: true,\n                })\n                return this[componentName]\n            }\n        })\n    }\n}\n\nconst allowTwoWayCommunication = function(data, observedComponent) {\n        return new Proxy(data, {\n            set(object, prop, value) {\n                if (!observedComponent.__x) {\n                    throw 'Error communicating with observed component'\n                }\n                observedComponent.__x.$data[prop] = value\n                observedComponent.__x.updateElements(observedComponent)\n                return true\n            }\n        })\n    }\n\nconst alpine = window.deferLoadingAlpine || ((alpine) => alpine())\n\nwindow.deferLoadingAlpine = function (callback) {\n    alpine(callback)\n\n    AlpineComponentMagicMethod.start()\n}\n\nexport default AlpineComponentMagicMethod\n"],"names":["saferEval","expression","dataContext","additionalHelperVariables","call","Function","Object","keys","values","AlpineComponentMagicMethod","start","window","Alpine","Error","checkForAlpine","addMagicProperty","$el","$parent","data","parentComponent","parentNode","closest","setAttribute","__x","getUnobservedData","getAttribute","allowTwoWayCommunication","MutationObserver","mutations","i","length","mutatedComponent","target","isSameNode","updateElements","observe","attributes","childList","characterData","subtree","componentName","this","componentBeingObserved","document","querySelector","closestParentComponent","_this","observedComponent","Proxy","set","object","prop","value","$data","alpine","deferLoadingAlpine","callback"],"mappings":"yOAAO,IAMMA,EAAY,SAACC,EAAYC,EAAaC,mBAAAA,IAAAA,EAA4B,IACjD,mBAAfF,EACAA,EAAWG,KAAKF,GAGnB,IAAIG,UAAU,gBAAYC,OAAOC,KAAKJ,4DAAqFF,8CAC/HC,UAAgBI,OAAOE,OAAOL,MCRhCM,EAA6B,CAC/BC,kBDL0B,eACpBC,OAAOC,aACH,IAAIC,MAAM,mFCIhBC,GAEAF,OAAOG,iBAAiB,SAAU,SAAUC,WACb,IAAhBA,EAAIC,QAAyB,OAAOD,EAAIC,YAQ/CC,EANEC,EAAkBH,EAAII,WAAWC,QAAQ,gBAC1CF,EAAiB,KAAM,oCAG5BA,EAAgBG,aAAa,2BAA4B,cAIrDJ,EADAC,EAAgBI,IACTJ,EAAgBI,IAAIC,oBAGpBxB,EAAUmB,EAAgBM,aAAa,UAAWN,GAG7DH,EAAIC,QAAUS,EAAyBR,EAAMC,GAEtB,IAAIQ,iBAAiB,SAAAC,OACnC,IAAIC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAAK,KACjCE,EAAmBH,EAAUC,GAAGG,OAAOX,QAAQ,gBAChDU,GAAqBA,EAAiBE,WAAWd,UACtDH,EAAIC,QAAUS,EAAyBP,EAAgBI,IAAIC,oBAAqBL,QAChFH,EAAIO,IAAIW,eAAelB,MAKhBmB,QAAQhB,EAAiB,CACpCiB,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,SAAS,IAGNrB,IAGXN,OAAOG,iBAAiB,YAAa,SAAUC,UACpC,SAAUwB,sBAEsB,IAAxBC,KAAKD,GAAgC,OAAOC,KAAKD,OASxDtB,EAPEwB,EAAyBC,SAASC,gCAAgCJ,kBAA6BA,OAChGE,EAAwB,KAAM,6BAGnCA,EAAuBpB,aAAa,2BAA4B,cAK5DJ,EADAwB,EAAuBnB,IAChBmB,EAAuBnB,IAAIC,oBAG3BxB,EAAU0C,EAAuBjB,aAAa,UAAWiB,QAG/DF,GAAiBd,EAAyBR,EAAMwB,GAEpC,IAAIf,iBAAiB,SAAAC,OAC7B,IAAIC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAAK,KACjCgB,EAAyBjB,EAAUC,GAAGG,OAAOX,QAAQ,gBACtDwB,IAA0BA,EAAuBZ,WAAWa,EAAK9B,iBACtE8B,EAAKN,GAAiBd,EAAyBgB,EAAuBnB,IAAIC,oBAAqBkB,OAI9FP,QAAQO,EAAwB,CACrCN,YAAY,EACZC,WAAW,EACXC,eAAe,EACfC,SAAS,IAENE,KAAKD,QAMtBd,EAA2B,SAASR,EAAM6B,UACjC,IAAIC,MAAM9B,EAAM,CACnB+B,aAAIC,EAAQC,EAAMC,OACTL,EAAkBxB,SACb,qDAEVwB,EAAkBxB,IAAI8B,MAAMF,GAAQC,EACpCL,EAAkBxB,IAAIW,eAAea,IAC9B,MAKjBO,EAAS3C,OAAO4C,oBAAuB,SAACD,UAAWA,YAEzD3C,OAAO4C,mBAAqB,SAAUC,GAClCF,EAAOE,GAEP/C,EAA2BC"}