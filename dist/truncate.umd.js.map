{"version":3,"file":"truncate.umd.js","sources":["../src/truncate.js","../src/utils.js"],"sourcesContent":["import { checkForAlpine } from './utils'\n\nconst AlpineTruncateMagicMethod = {\n    start() {\n        checkForAlpine()\n\n        Alpine.addMagicProperty('truncate', function () {\n            return (...parameters) => {\n                if (typeof parameters[0] !== 'string') return parameters[0]\n                let ellipsis = '…'\n\n                // If the second parameter isn't truthy, return the full string\n                if (!parameters[1]) return parameters[0]\n\n                // if only a number or string is passed in, keep it simple\n                if (typeof parameters[1] !== 'object') {\n                    if (typeof parameters[2] !== 'undefined') {\n                        ellipsis = parameters[2]\n                    }\n                    return parameters[0].slice(0, parameters[1]) + ellipsis\n                }\n\n                // Customize the …\n                if (parameters[1].hasOwnProperty('ellipsis')) {\n                    ellipsis = parameters[1].ellipsis\n                }\n\n                // If words or characters is set, also check that they are truthy. Setting to 0, for example, shoudld show all\n                if (parameters[1].hasOwnProperty('words') && parameters[1].words) {\n                    return parameters[0].split(\" \").splice(0, parameters[1].words).join(\" \") + ellipsis\n                }\n                if (parameters[1].hasOwnProperty('characters') && parameters[1].characters) {\n                    return parameters[0].slice(0, parameters[1]['characters']) + ellipsis\n                }\n                return parameters[0]\n            }\n        })\n    }\n}\n\nconst alpine = window.deferLoadingAlpine || ((alpine) => alpine())\n\nwindow.deferLoadingAlpine = function (callback) {\n    AlpineTruncateMagicMethod.start()\n\n    alpine(callback)\n}\n\nexport default AlpineTruncateMagicMethod\n","export const checkForAlpine = () => {\n    if (! window.Alpine) {\n        throw new Error('[Magic Helpers] Alpine is required for the magic helpers to function correctly.')\n    }\n}\n\nexport const saferEval = (expression, dataContext, additionalHelperVariables = {}) => {\n    if (typeof expression === 'function') {\n        return expression.call(dataContext)\n    }\n\n    return (new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`))(\n        dataContext, ...Object.values(additionalHelperVariables)\n    )\n}\n"],"names":["AlpineTruncateMagicMethod","start","window","Alpine","Error","checkForAlpine","addMagicProperty","parameters","ellipsis","slice","hasOwnProperty","words","split","splice","join","characters","alpine","deferLoadingAlpine","callback"],"mappings":"yLAEMA,EAA4B,CAC9BC,kBCH0B,WAC1B,IAAMC,OAAOC,OACT,UAAUC,MAAM,mFDEhBC,GAEAF,OAAOG,iBAAiB,WAAY,WAChC,sBAAWC,2BACP,GAA6B,iBAAlBA,EAAW,GAAiB,OAAOA,EAAW,GACzD,IAAIC,EAAW,IAGf,OAAKD,EAAW,GAGa,iBAAlBA,EAAW,SACW,IAAlBA,EAAW,KAClBC,EAAWD,EAAW,IAEnBA,EAAW,GAAGE,MAAM,EAAGF,EAAW,IAAMC,IAI/CD,EAAW,GAAGG,eAAe,cAC7BF,EAAWD,EAAW,GAAGC,UAIzBD,EAAW,GAAGG,eAAe,UAAYH,EAAW,GAAGI,MAChDJ,EAAW,GAAGK,MAAM,KAAKC,OAAO,EAAGN,EAAW,GAAGI,OAAOG,KAAK,KAAON,EAE3ED,EAAW,GAAGG,eAAe,eAAiBH,EAAW,GAAGQ,WACrDR,EAAW,GAAGE,MAAM,EAAGF,EAAW,GAAX,YAA+BC,EAE1DD,EAAW,IAtBSA,EAAW,QA4BhDS,EAASd,OAAOe,oBAAuB,SAACD,UAAWA,YAEzDd,OAAOe,mBAAqB,SAAUC,GAClClB,EAA0BC,QAE1Be,EAAOE"}